### Creates a target that executes the autojinja command.
###
###     autojinja(
###         [ARGUMENTS] [<filepath>|<dirpath>]...
###         [GENERATES [<filepath>]...]
###         [DEPENDS [<pattern>]...]
###         [ENVIRONMENT [<name=value>|<filepath>]...]
###         [INCLUDES [<dirpath>]...]
###         [OPTIONS [<option>]...]
###         [TARGET <name>]
###     )
###
### -------------------
### ----  Options  ----
### -------------------
###
###     ARGUMENTS:
###         Python scripts to execute and directories to visit for the autojinja command.
###
###     GENERATES:
###         List of files generated by this target.
###         Can remain empty when generating files that are already part of a build target.
###         Generated files are automatically added as dependencies for this target.
###
###     DEPENDS:
###         Dependencies for this target, CMake re-executes the autojinja command when such dependencies change.
###         Additional dependencies can be provided in parent scopes with the 'autojinja_dependencies'
###         function or by directly using the ${AUTOJINJA_DEPENDENCIES} CMake variable.
###
###     ENVIRONMENT:
###         Environment variables and environment files for the autojinja command.
###         Additional environment variables and environment files can be provided in parent scopes with the
###         'autojinja_environment' function or by directly using the ${AUTOJINJA_ENVIRONMENT} CMake variable.
###         Environment files are automatically added as dependencies for this target.
###
###     INCLUDES:
###         Import directories for the autojinja command, appended to environment variable 'PYTHONPATH'.
###         Additional import directories can be provided in parent scopes with the 'autojinja_includes'
###         function or by directly using the ${AUTOJINJA_INCLUDES} CMake variable.
###
###     OPTIONS:
###         Options for the autojinja command, replaces all options defined in parent scopes.
###         Options can be provided in parent scopes with the 'autojinja_options' function
###         or by directly using the ${AUTOJINJA_OPTIONS} CMake variable.
###
###     TARGET:
###         Name of this target, default value is 'autojinja'.
###         Creates a CMake variable with same name containing all files
###         generated by this target, as well as the target itself.
###
### -------------------
### ---- Example 1 ----
### -------------------
###
###     autojinja(__jinja__.py GENERATES file.cpp)
###     add_executable(app ${autojinja})
###
### equivalent to :
###
###     autojinja(
###         ARGUMENTS __jinja__.py
###         GENERATES file.cpp
###         TARGET autojinja
###     )
###     add_executable(app ${autojinja})
###
### -------------------
### ---- Example 2 ----
### -------------------
###
###     autojinja(
###         ARGUMENTS
###             script.py
###             dir/
###         GENERATES
###             file.h
###             file.cpp
###         DEPENDS
###             resources/**
###             lib/utility.py
###         ENVIRONMENT
###             VAR1=42
###             file.env
###         INCLUDES
###             dir1/
###             dir2/
###         OPTIONS
###             -t
###             --tag customtag
###             --silent
###         TARGET
###             customtarget
###     )
###     add_executable(app ${customtarget})
###
function(autojinja)
    # Parse arguments
    cmake_parse_arguments(ARG "" "TARGET" "ARGUMENTS;GENERATES;DEPENDS;ENVIRONMENT;INCLUDES;OPTIONS" ${ARGN})
    list(APPEND ARG_ARGUMENTS ${ARG_UNPARSED_ARGUMENTS})
    if(ARG_DEPENDS)
        autojinja_dependencies(${ARG_DEPENDS})
    endif()
    if(ARG_ENVIRONMENT)
        autojinja_environment(${ARG_ENVIRONMENT})
    endif()
    if(ARG_INCLUDES)
        autojinja_includes(${ARG_INCLUDES})
    endif()
    if(ARG_OPTIONS)
        autojinja_options(${ARG_OPTIONS})
    endif()
    if(NOT DEFINED ARG_TARGET)
        set(ARG_TARGET "autojinja")
    endif()
    # Create dummy files
    foreach(argument ${ARG_GENERATES})
        make_absolute(${argument} abs_path)
        if(NOT EXISTS ${abs_path})
            file(TOUCH ${abs_path})
        endif()
    endforeach()
    # Create autojinja command
    add_custom_command(
      OUTPUT ${ARG_TARGET}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      DEPENDS ${ARG_ARGUMENTS} ${ARG_GENERATES} ${AUTOJINJA_DEPENDENCIES}
      COMMAND autojinja ${ARG_ARGUMENTS} ${AUTOJINJA_ENVIRONMENT} ${AUTOJINJA_INCLUDES} ${AUTOJINJA_OPTIONS}
      COMMAND echo "${ARG_TARGET}" > "${CMAKE_CURRENT_BINARY_DIR}/${ARG_TARGET}"
    )
    set(${ARG_TARGET} ${ARG_TARGET} ${ARG_GENERATES} PARENT_SCOPE)
endfunction(autojinja)

### Additional dependencies for the autojinja command.
### Usage:
###     autojinja_dependencies(file.h file.cpp)
###     autojinja_dependencies(resources/**)
###
function(autojinja_dependencies)
    foreach(dependency ${ARGN})
        make_absolute(${dependency} dependency)
        list(APPEND AUTOJINJA_DEPENDENCIES ${dependency})
    endforeach()
    set(AUTOJINJA_DEPENDENCIES ${AUTOJINJA_DEPENDENCIES} PARENT_SCOPE)
endfunction(autojinja_dependencies)

### Additional environment variables and environment files for the autojinja command.
### Usage:
###     autojinja_environment(var1=test1 "var2=123;456")
###     autojinja_environment(file.env)
###
function(autojinja_environment)
    foreach(variable ${ARGN})
        string(FIND ${variable} "=" equalidx)
        if(equalidx LESS 0) # Environment file
            make_absolute(${variable} filepath)
            list(APPEND AUTOJINJA_ENVIRONMENT "-e" ${filepath})
            list(APPEND AUTOJINJA_DEPENDENCIES ${filepath})
            # CMake re-configuration on change
            set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${filepath})
        else() # Environment variable
            list(APPEND AUTOJINJA_ENVIRONMENT "-e" ${variable})
        endif()
    endforeach()
    set(AUTOJINJA_ENVIRONMENT ${AUTOJINJA_ENVIRONMENT} PARENT_SCOPE)
    set(AUTOJINJA_DEPENDENCIES ${AUTOJINJA_DEPENDENCIES} PARENT_SCOPE)
endfunction(autojinja_environment)

### Additional import directories for the autojinja command, appended to environment variable 'PYTHONPATH'.
### Usage:
###     autojinja_includes(dir)
###     autojinja_includes(dir/dir1 dir/dir2)
###
function(autojinja_includes)
    foreach(dirpath ${ARGN})
        make_absolute(${dirpath} dirpath)
        list(APPEND AUTOJINJA_INCLUDES "-i" ${dirpath})
    endforeach()
    set(AUTOJINJA_INCLUDES ${AUTOJINJA_INCLUDES} PARENT_SCOPE)
endfunction(autojinja_includes)

### Options for the autojinja command.
### Usage:
###     autojinja_options(--silent)
###     autojinja_options(-t --tag customtag) # Replaces previous options
###
function(autojinja_options)
    set(AUTOJINJA_OPTIONS "")
    foreach(option ${ARGN})
        list(APPEND AUTOJINJA_OPTIONS ${option})
    endforeach()
    set(AUTOJINJA_OPTIONS ${AUTOJINJA_OPTIONS} PARENT_SCOPE)
endfunction(autojinja_options)

### Makes the given path absolute.
### Usage:
###     make_absolute("src/" outvar)
###     make_absolute(${filepath} filepath)
###
function(make_absolute filepath outvar)
    if(IS_ABSOLUTE ${filepath})
        set(${outvar} ${filepath} PARENT_SCOPE)
    else()
        set(${outvar} ${CMAKE_CURRENT_SOURCE_DIR}/${filepath} PARENT_SCOPE)
    endif()
endfunction(make_absolute)
